{"ast":null,"code":"import { collection, getDocs, onSnapshot, query, addDoc, getDoc, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nexport default class FirebaseService {\n  static list_onSnapshot(firestore, callback) {\n    const q = query(collection(firestore, 'student'));\n    FirebaseService.unscribe = onSnapshot(q, querySnapshot => {\n      let students = [];\n      querySnapshot.forEach(doc => {\n        const {\n          name,\n          course,\n          ira\n        } = doc.data();\n        students.push({\n          _id: doc.id,\n          name,\n          course,\n          ira\n        });\n      });\n      callback(students);\n    });\n  }\n\n}\nFirebaseService.unscribe = null;\n\nFirebaseService.list = (firestore, callback) => {\n  getDocs(collection(firestore, 'student')).then(querySnapshot => {\n    let students = [];\n    querySnapshot.forEach(doc => {\n      const {\n        name,\n        course,\n        ira\n      } = doc.data();\n      students.push({\n        _id: doc.id,\n        name,\n        course,\n        ira\n      });\n    });\n    callback(students);\n  }).catch(error => console.log(error));\n};\n\nFirebaseService.create = (firestore, callback, data) => {\n  addDoc(collection(firestore, 'student'), data).then(doc => {\n    console.log(\"CREATE:\" + doc.id);\n    callback();\n  }).catch(error => console.log(error));\n};\n\nFirebaseService.retrieve = async (firestore, callback, _id) => {\n  const docRef = doc(firestore, \"student\", _id);\n  const docSnap = await getDoc(docRef);\n\n  if (docSnap.exists()) {\n    //console.log(\"Document data:\", docSnap.data());\n    callback(docSnap.data());\n  } else {\n    // doc.data() will be undefined in this case\n    console.log(\"No such document!\");\n  }\n};\n\nFirebaseService.retrieve_promisse = (firestore, callback, _id) => {\n  const docRef = doc(firestore, \"student\", _id);\n  getDoc(docRef).then(docSnap => {\n    if (docSnap.exists) callback(docSnap.data());\n  }).catch(error => console.log(error));\n};\n\nFirebaseService.update = (firestore, callback, _id, body) => {\n  const docRef = doc(firestore, \"student\", _id);\n  updateDoc(docRef, body).then(() => {\n    callback();\n  }).catch(error => console.log(error));\n};\n\nFirebaseService.delete = (firestore, callback, _id) => {\n  const docRef = doc(firestore, \"student\", _id);\n  deleteDoc(docRef).then(() => {\n    callback();\n  }).catch(error => console.log(error));\n};","map":{"version":3,"sources":["/home/saulo/Documents/atividade6/crud/src/services/FirebaseService.js"],"names":["collection","getDocs","onSnapshot","query","addDoc","getDoc","doc","updateDoc","deleteDoc","FirebaseService","list_onSnapshot","firestore","callback","q","unscribe","querySnapshot","students","forEach","name","course","ira","data","push","_id","id","list","then","catch","error","console","log","create","retrieve","docRef","docSnap","exists","retrieve_promisse","update","body","delete"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,UAA9B,EAA0CC,KAA1C,EAAiDC,MAAjD,EAAyDC,MAAzD,EAAiEC,GAAjE,EAAsEC,SAAtE,EAAiFC,SAAjF,QAAiG,oBAAjG;AAEA,eAAe,MAAMC,eAAN,CAAsB;AAkBX,SAAfC,eAAe,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAExC,UAAMC,CAAC,GAAGV,KAAK,CAACH,UAAU,CAACW,SAAD,EAAY,SAAZ,CAAX,CAAf;AACAF,IAAAA,eAAe,CAACK,QAAhB,GAA2BZ,UAAU,CACjCW,CADiC,EAEhCE,aAAD,IAAmB;AACf,UAAIC,QAAQ,GAAG,EAAf;AACAD,MAAAA,aAAa,CAACE,OAAd,CACKX,GAAD,IAAS;AACL,cAAM;AAAEY,UAAAA,IAAF;AAAQC,UAAAA,MAAR;AAAgBC,UAAAA;AAAhB,YAAwBd,GAAG,CAACe,IAAJ,EAA9B;AACAL,QAAAA,QAAQ,CAACM,IAAT,CAAc;AAAEC,UAAAA,GAAG,EAAEjB,GAAG,CAACkB,EAAX;AAAeN,UAAAA,IAAf;AAAqBC,UAAAA,MAArB;AAA6BC,UAAAA;AAA7B,SAAd;AACH,OAJL;AAMAR,MAAAA,QAAQ,CAACI,QAAD,CAAR;AACH,KAXgC,CAArC;AAYH;;AAjCgC;AAAhBP,e,CACVK,Q,GAAW,I;;AADDL,e,CAGVgB,I,GAAO,CAACd,SAAD,EAAYC,QAAZ,KAAyB;AACnCX,EAAAA,OAAO,CAACD,UAAU,CAACW,SAAD,EAAY,SAAZ,CAAX,CAAP,CACKe,IADL,CACWX,aAAD,IAAmB;AACrB,QAAIC,QAAQ,GAAG,EAAf;AACAD,IAAAA,aAAa,CAACE,OAAd,CACKX,GAAD,IAAS;AACL,YAAM;AAAEY,QAAAA,IAAF;AAAQC,QAAAA,MAAR;AAAgBC,QAAAA;AAAhB,UAAwBd,GAAG,CAACe,IAAJ,EAA9B;AACAL,MAAAA,QAAQ,CAACM,IAAT,CAAc;AAAEC,QAAAA,GAAG,EAAEjB,GAAG,CAACkB,EAAX;AAAeN,QAAAA,IAAf;AAAqBC,QAAAA,MAArB;AAA6BC,QAAAA;AAA7B,OAAd;AACH,KAJL;AAMAR,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACH,GAVL,EAWKW,KAXL,CAWYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAXtB;AAYH,C;;AAhBgBnB,e,CAmCVsB,M,GAAS,CAACpB,SAAD,EAAYC,QAAZ,EAAsBS,IAAtB,KAA+B;AAC3CjB,EAAAA,MAAM,CAACJ,UAAU,CAACW,SAAD,EAAY,SAAZ,CAAX,EAAmCU,IAAnC,CAAN,CACKK,IADL,CAESpB,GAAD,IAAS;AACLuB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYxB,GAAG,CAACkB,EAA5B;AACAZ,IAAAA,QAAQ;AACX,GALT,EAOKe,KAPL,CAOYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAPtB;AAQH,C;;AA5CgBnB,e,CA+CVuB,Q,GAAW,OAAMrB,SAAN,EAAiBC,QAAjB,EAA2BW,GAA3B,KAAmC;AAEjD,QAAMU,MAAM,GAAG3B,GAAG,CAACK,SAAD,EAAY,SAAZ,EAAuBY,GAAvB,CAAlB;AACA,QAAMW,OAAO,GAAG,MAAM7B,MAAM,CAAC4B,MAAD,CAA5B;;AAEA,MAAIC,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClB;AACAvB,IAAAA,QAAQ,CAACsB,OAAO,CAACb,IAAR,EAAD,CAAR;AACH,GAHD,MAGO;AACH;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;AAEJ,C;;AA5DgBrB,e,CA8DV2B,iB,GAAoB,CAACzB,SAAD,EAAYC,QAAZ,EAAsBW,GAAtB,KAA8B;AACrD,QAAMU,MAAM,GAAG3B,GAAG,CAACK,SAAD,EAAY,SAAZ,EAAuBY,GAAvB,CAAlB;AACAlB,EAAAA,MAAM,CAAC4B,MAAD,CAAN,CACCP,IADD,CACOQ,OAAD,IAAW;AACb,QAAGA,OAAO,CAACC,MAAX,EAAmBvB,QAAQ,CAACsB,OAAO,CAACb,IAAR,EAAD,CAAR;AACtB,GAHD,EAICM,KAJD,CAIOC,KAAK,IAAEC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAJd;AAKH,C;;AArEgBnB,e,CAuEV4B,M,GAAS,CAAC1B,SAAD,EAAWC,QAAX,EAAoBW,GAApB,EAAwBe,IAAxB,KAAiC;AAC7C,QAAML,MAAM,GAAG3B,GAAG,CAACK,SAAD,EAAY,SAAZ,EAAuBY,GAAvB,CAAlB;AACAhB,EAAAA,SAAS,CAAC0B,MAAD,EAAQK,IAAR,CAAT,CACCZ,IADD,CAEI,MAAI;AACAd,IAAAA,QAAQ;AACX,GAJL,EAMCe,KAND,CAMQC,KAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANhB;AAOH,C;;AAhFgBnB,e,CAkFV8B,M,GAAS,CAAC5B,SAAD,EAAWC,QAAX,EAAoBW,GAApB,KAA4B;AACxC,QAAMU,MAAM,GAAG3B,GAAG,CAACK,SAAD,EAAY,SAAZ,EAAuBY,GAAvB,CAAlB;AACAf,EAAAA,SAAS,CAACyB,MAAD,CAAT,CACCP,IADD,CAEI,MAAI;AACAd,IAAAA,QAAQ;AACX,GAJL,EAMCe,KAND,CAMQC,KAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANhB;AAOH,C","sourcesContent":["import { collection, getDocs, onSnapshot, query, addDoc, getDoc, doc, updateDoc, deleteDoc} from \"firebase/firestore\"\n\nexport default class FirebaseService {\n    static unscribe = null\n\n    static list = (firestore, callback) => {\n        getDocs(collection(firestore, 'student'))\n            .then((querySnapshot) => {\n                let students = []\n                querySnapshot.forEach(\n                    (doc) => {\n                        const { name, course, ira } = doc.data()\n                        students.push({ _id: doc.id, name, course, ira })\n                    }\n                )\n                callback(students)\n            })\n            .catch((error) => console.log(error))\n    }\n\n    static list_onSnapshot(firestore, callback) {\n\n        const q = query(collection(firestore, 'student'))\n        FirebaseService.unscribe = onSnapshot(\n            q,\n            (querySnapshot) => {\n                let students = []\n                querySnapshot.forEach(\n                    (doc) => {\n                        const { name, course, ira } = doc.data()\n                        students.push({ _id: doc.id, name, course, ira })\n                    }\n                )\n                callback(students)\n            })\n    }\n\n    static create = (firestore, callback, data) => {\n        addDoc(collection(firestore, 'student'), data)\n            .then(\n                (doc) => {\n                    console.log(\"CREATE:\" + doc.id)\n                    callback()\n                }\n            )\n            .catch((error) => console.log(error))\n    }\n\n\n    static retrieve = async(firestore, callback, _id) => {\n\n        const docRef = doc(firestore, \"student\", _id);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n            //console.log(\"Document data:\", docSnap.data());\n            callback(docSnap.data())\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n        \n    }\n\n    static retrieve_promisse = (firestore, callback, _id) => {\n        const docRef = doc(firestore, \"student\", _id);\n        getDoc(docRef)\n        .then((docSnap)=>{\n            if(docSnap.exists) callback(docSnap.data())\n        })\n        .catch(error=>console.log(error))\n    }\n\n    static update = (firestore,callback,_id,body) => {\n        const docRef = doc(firestore, \"student\", _id);\n        updateDoc(docRef,body)\n        .then(\n            ()=>{\n                callback()\n            }\n        )\n        .catch((error)=>console.log(error))\n    }\n    \n    static delete = (firestore,callback,_id) => {\n        const docRef = doc(firestore, \"student\", _id);\n        deleteDoc(docRef)\n        .then(\n            ()=>{\n                callback()\n            }\n        )\n        .catch((error)=>console.log(error))\n    }\n\n}"]},"metadata":{},"sourceType":"module"}