{"ast":null,"code":"import { collection, getDocs, onSnapshot, query, addDoc, getDoc, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nexport default class FirebaseProfessorService {\n  static list_onSnapshot(firestore, callback) {\n    const q = query(collection(firestore, 'professors'));\n    FirebaseProfessorService.unscribe = onSnapshot(q, querySnapshot => {\n      let professors = [];\n      querySnapshot.forEach(doc => {\n        const {\n          name,\n          university,\n          degree\n        } = doc.data();\n        professors.push({\n          _id: doc.id,\n          name,\n          university,\n          degree\n        });\n      });\n      callback(professors);\n    });\n  }\n\n}\nFirebaseProfessorService.unscribe = null;\n\nFirebaseProfessorService.list = (firestore, callback) => {\n  getDocs(collection(firestore, 'professors')).then(querySnapshot => {\n    let professors = [];\n    querySnapshot.forEach(doc => {\n      const {\n        name,\n        university,\n        degree\n      } = doc.data();\n      professors.push({\n        _id: doc.id,\n        name,\n        university,\n        degree\n      });\n    });\n    callback(professors);\n  }).catch(error => console.log(error));\n};\n\nFirebaseProfessorService.create = (firestore, callback, data) => {\n  addDoc(collection(firestore, 'professors'), data).then(doc => {\n    console.log(\"CREATE:\" + doc.id);\n    callback();\n  }).catch(error => console.log(error));\n};\n\nFirebaseProfessorService.retrieve = async (firestore, callback, _id) => {\n  const docRef = doc(firestore, \"professors\", _id);\n  const docSnap = await getDoc(docRef);\n\n  if (docSnap.exists()) {\n    callback(docSnap.data());\n  } else {\n    console.log(\"No such document!\");\n  }\n};\n\nFirebaseProfessorService.retrieve_promise = (firestore, callback, _id) => {\n  const docRef = doc(firestore, \"professors\", _id);\n  getDoc(docRef).then(docSnap => {\n    if (docSnap.exists) callback(docSnap.data());\n  }).catch(error => console.log(error));\n};\n\nFirebaseProfessorService.update = (firestore, callback, _id, body) => {\n  const docRef = doc(firestore, \"professors\", _id);\n  updateDoc(docRef, body).then(() => {\n    callback();\n  }).catch(error => console.log(error));\n};\n\nFirebaseProfessorService.delete = (firestore, callback, _id) => {\n  const docRef = doc(firestore, \"professors\", _id);\n  deleteDoc(docRef).then(() => {\n    callback();\n  }).catch(error => console.log(error));\n};","map":{"version":3,"sources":["/home/saulo/Documents/atividade6/crud/src/services/FirebaseProfessorService.js"],"names":["collection","getDocs","onSnapshot","query","addDoc","getDoc","doc","updateDoc","deleteDoc","FirebaseProfessorService","list_onSnapshot","firestore","callback","q","unscribe","querySnapshot","professors","forEach","name","university","degree","data","push","_id","id","list","then","catch","error","console","log","create","retrieve","docRef","docSnap","exists","retrieve_promise","update","body","delete"],"mappings":"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","sourcesContent":["import { collection, getDocs, onSnapshot, query, addDoc, getDoc, doc, updateDoc, deleteDoc} from \"firebase/firestore\"\n\nexport default class FirebaseProfessorService {\n    static unscribe = null\n\n    static list = (firestore, callback) => {\n        getDocs(collection(firestore, 'professors'))\n            .then((querySnapshot) => {\n                let professors = []\n                querySnapshot.forEach((doc) => {\n                    const {name, university, degree} = doc.data()\n                    professors.push({_id: doc.id, name, university, degree })\n                })\n                callback(professors)\n            })\n            .catch((error) => console.log(error))\n    }\n\nstatic list_onSnapshot(firestore, callback){\n    const q = query(collection(firestore, 'professors'))\n    FirebaseProfessorService.unscribe = onSnapshot(\n        q, \n        (querySnapshot) => {\n            let professors = []\n            querySnapshot.forEach(\n                (doc) => {\n                    const {name,university,degree} = doc.data()\n                    professors.push({_id:doc.id, name,university,degree})\n                }\n            )\n            callback(professors)\n        })\n\n}\n\nstatic create = (firestore, callback,data) => {\n    addDoc(collection(firestore, 'professors'), data)\n        .then(\n            (doc) => {\n                console.log(\"CREATE:\"+doc.id)\n                callback()\n            }\n        )\n        .catch((error) => console.log(error))\n}\n\nstatic retrieve = async(firestore, callback, _id) => {\n    \n    const docRef = doc(firestore, \"professors\", _id);\n    const docSnap = await getDoc(docRef);\n\n    if (docSnap.exists()){\n        callback(docSnap.data())\n    } else{\n        console.log(\"No such document!\");\n    }\n\n}\n\nstatic retrieve_promise = (firestore, callback, _id) => {\n    const docRef = doc(firestore, \"professors\", _id);\n    getDoc(docRef)\n    .then((docSnap) => {\n        if(docSnap.exists) callback(docSnap.data())\n    })\n    .catch(error=> console.log(error))\n}\n\nstatic update = (firestore, callback, _id, body) => {\n    const docRef = doc(firestore, \"professors\", _id);\n    updateDoc(docRef, body)\n    .then(\n        () => {\n            callback()\n        }\n    )\n    .catch((error) => console.log(error))\n}\n\nstatic delete = (firestore, callback, _id) => {\n    const docRef = doc(firestore,\"professors\", _id);\n    deleteDoc(docRef)\n    .then(\n        () => {\n            callback()\n        }\n\n    )\n    .catch((error) => console.log(error))\n}\n\n}"]},"metadata":{},"sourceType":"module"}